# 1.2 Journal

## 1. Imagine you’re having a conversation with a future colleague about whether to use the iPython Shell instead of Python’s default shell. What reasons would you give to explain the benefits of using the iPython Shell over the default one?

iPython shell allows developers more feedback as to what we are working on. This feedback is provided by the shell with color codes for certain objects that also delivers a more intuitive experience. In addition to the color codes, iPython comes with other convenient features such as automatic indentation.


## 2. Python has a host of different data types that allow you to store and organize information. List 4 examples of data types that Python recognizes, briefly define them, and indicate whether they are scalar or non-scalar.

### Floats

Floats are numbers that include decimal places. These can have the same value as an integer however in this case they would still have a decimal place followed by a 0. These are a scaler data format as it is a single value and not multiple values stored in a set. 

### Tuples

Tuples are a means of storing data in a list style format using parentheses and , to seperate out the data ie. ( <data>, <data>, <data>). It also allows you to store different kinds of data such as booleens, integers, strings, or floats. This means of storing data though is harder to edit and more strict in its handling than other data storage methods. This is a composit data type as it stores more than one piece of data and is considered non-scalar.

### Lists
Lists are another composit data type that can store multiple pieces of information making it non-scalar. This type of storage is easier to look through and find information when using Python. Lists are also capable of manipulation in that you can sort them find specific data and change them with simple commands. 

### Dictionaries
Dictionaries are a data type that can store multiple sets of data within them making them non-scalar. They can hold all data types including other dictionaries. These are great for storing information, however, they are not as easy to look through for large sets of data.


## 3. A frequent question at job interviews for Python developers is: what is the difference between lists and tuples in Python? Write down how you would respond.

Lists are denoted using [ square ] brackets and Tuples are denoted using ( parenthesis ). Tuples are more strict in what you can do as you cannot modify or change elements within a tuple, whereas with a list you can manipulate the data more easily. Both of these methods can store similar information, however, under different circumstances one could be better than the other. If your data could be changing frequently depending on what is going on lists are ideal. However, if the data you are using is more solidified and constant tuples would be good as they are more limited and secure from many changes. 


## 4. In the task for this Exercise, you decided what you thought was the most suitable data structure for storing all the information for a recipe. Now, imagine you’re creating a language-learning app that helps users memorize vocabulary through flashcards. Users can input vocabulary words, definitions, and their category (noun, verb, etc.) into the flashcards. They can then quiz themselves by flipping through the flashcards. Think about the necessary data types and what would be the most suitable data structure for this language-learning app. Between tuples, lists, and dictionaries, which would you choose? Think about their respective advantages and limitations, and where flexibility might be useful if you were to continue developing the language-learning app beyond vocabulary memorization. 

If I were making a language application needing to store three things: words, definitions, and category; I would utilize several storage methods. I would store all of the vocabulary words in a list as this will allow for changes and data manipulation for when new words want to be added to their vocabulary list. Within the vocabulary list I would have dictionaries store each of the vocabulary words themselves. This would allow me to store multiple other types of formats within them. The word itself would be a string to represent the word, this could be the same for the words definitions. I would use a list for the categories as I believe the ability to modify will be useful. Tuples could be a good option as they are secure, however, I believe the ability to make changes to categories will prove useful.